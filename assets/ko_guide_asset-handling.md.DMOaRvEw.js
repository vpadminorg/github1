import{_ as s,c as i,o as a,aT as e}from"./chunks/framework.Bzw2HXFU.js";const g=JSON.parse('{"title":"자산 처리","description":"","frontmatter":{},"headers":[],"relativePath":"ko/guide/asset-handling.md","filePath":"ko/guide/asset-handling.md","lastUpdated":1728558315000}'),t={name:"ko/guide/asset-handling.md"},n=e(`<h1 id="asset-handling" tabindex="-1">자산 처리 <a class="header-anchor" href="#asset-handling" aria-label="Permalink to &quot;자산 처리 {#asset-handling}&quot;">​</a></h1><h2 id="referencing-static-assets" tabindex="-1">정적 자산 참조하기 <a class="header-anchor" href="#referencing-static-assets" aria-label="Permalink to &quot;정적 자산 참조하기 {#referencing-static-assets}&quot;">​</a></h2><p>모든 Markdown 파일은 Vue 컴포넌트로 컴파일되며 <a href="https://vitejs.dev/ko/guide/assets.html" target="_blank" rel="noreferrer">Vite</a>에 의해 처리됩니다. 상대 URL을 사용하여 어떠한 자산도 참조할 수 <strong>있으며 해야 합니다</strong>:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">![</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">이미지</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">./image.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Markdown 파일, 테마의 <code>*.vue</code> 컴포넌트, 스타일 및 일반 <code>.css</code> 파일에서 정적 자산을 참조할 수 있으며, 절대 공개 경로(프로젝트 루트를 기준으로 함) 또는 상대 경로(파일 시스템을 기준으로 함)를 사용할 수 있습니다. 후자는 Vite, Vue CLI 또는 webpack의 <code>file-loader</code>를 사용해 본 적이 있다면 익숙한 동작 방식과 유사합니다.</p><p>일반적인 이미지, 미디어, 폰트 파일 유형은 자동으로 자산으로 감지되어 포함됩니다.</p><div class="tip custom-block"><p class="custom-block-title">링크된 파일은 자산으로 취급되지 않음</p><p>Markdown 파일 내의 링크로 참조된 PDF 또는 기타 문서는 자동으로 자산으로 취급되지 않습니다. 링크된 파일을 접근 가능하게 만들기 위해서는 수동으로 해당 파일을 프로젝트의 <a href="#the-public-directory"><code>public</code></a> 디렉토리에 배치해야 합니다.</p></div><p>절대 경로를 포함한 모든 참조된 자산은 생산 빌드에서 해시된 파일 이름으로 출력 디렉토리에 복사됩니다. 참조되지 않은 자산은 복사되지 않습니다. 4kb보다 작은 이미지 자산은 base64 인라인으로 처리됩니다 - 이는 <a href="./../reference/site-config#vite"><code>vite</code></a> 구성 옵션을 통해 설정할 수 있습니다.</p><p>모든 <strong>정적</strong> 경로 참조, 절대 경로를 포함하여, 작업 디렉토리 구조를 기반으로 해야 합니다.</p><h2 id="the-public-directory" tabindex="-1">Public 디렉토리 <a class="header-anchor" href="#the-public-directory" aria-label="Permalink to &quot;Public 디렉토리 {#the-public-directory}&quot;">​</a></h2><p>Markdown이나 테마 컴포넌트에서 직접 참조되지 않은 정적 자산을 제공할 필요가 있거나, 특정 파일을 원본 파일명으로 제공하고 싶은 경우가 있을 수 있습니다. 이러한 파일의 예로는 <code>robots.txt</code>, 파비콘, PWA 아이콘이 있습니다.</p><p>이 파일들은 <a href="./routing#source-directory">소스 디렉토리</a> 아래의 <code>public</code> 디렉토리에 배치할 수 있습니다. 예를 들어, 프로젝트 루트가 <code>./docs</code>이고 기본 소스 디렉토리 위치를 사용한다면, public 디렉토리는 <code>./docs/public</code>이 됩니다.</p><p><code>public</code>에 배치된 자산은 그대로 출력 디렉토리의 루트로 복사됩니다.</p><p><code>public</code>에 배치된 파일을 참조할 때는 루트 절대 경로를 사용해야 한다는 점에 유의하세요 - 예를 들어, <code>public/icon.png</code>는 소스 코드에서 항상 <code>/icon.png</code>로 참조되어야 합니다.</p><h2 id="base-url" tabindex="-1">기본 URL <a class="header-anchor" href="#base-url" aria-label="Permalink to &quot;기본 URL {#base-url}&quot;">​</a></h2><p>사이트가 루트 URL이 아닌 곳에 배포되는 경우, <code>.vitepress/config.js</code>에서 <code>base</code> 옵션을 설정해야 합니다. 예를 들어, 사이트를 <code>https://foo.github.io/bar/</code>에 배포할 계획이라면, <code>base</code>는 <code>&#39;/bar/&#39;</code>(항상 슬래시로 시작하고 끝나야 함)로 설정해야 합니다.</p><p>모든 정적 자산 경로는 다양한 <code>base</code> 구성 값에 맞게 자동으로 처리됩니다. 예를 들어, 마크다운에서 <code>public</code> 아래에 있는 자산에 대한 절대 참조가 있는 경우:</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">![</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">이미지</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">](</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;--shiki-light-text-decoration:underline;--shiki-dark-text-decoration:underline;">/image-inside-public.png</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>이 경우 <code>base</code> 구성 값을 변경하더라도 업데이트할 필요가 <strong>없습니다</strong>.</p><p>그러나 자산을 동적으로 연결하는 테마 컴포넌트를 작성하는 경우, 예를 들어 테마 구성 값에 기반한 이미지의 <code>src</code>가 있는 경우:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">theme.logoPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>이 경우 VitePress에 제공되는 <a href="./../reference/runtime-api#withbase"><code>withBase</code> 헬퍼</a>로 경로를 래핑하는 것이 권장됩니다:</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { withBase, useData } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vitepress&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">theme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withBase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(theme.logoPath)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,23),h=[n];function l(p,d,k,r,o,c){return a(),i("div",null,h)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
